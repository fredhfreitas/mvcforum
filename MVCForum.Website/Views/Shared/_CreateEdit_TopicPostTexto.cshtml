
@using MvcForum.Web.Application.ExtensionMethods
@model MvcForum.Web.ViewModels.Topic.CreateEditTopicViewModel
@{
    var count = 0;
    const string displayNone = "style=\"display: none;\"";
    ViewBag.ImageUploadType = Model.OptionalPermissions.CanInsertImages ? "forumimageinsert" : "image";
}

@Html.HiddenFor(x => x.TopicId)


<div class="paddedrow topicname">
    <div class="col-md-4 col-md-offset-4">
        <span class="title-step">Compartilhar um texto</span>
        <div class="form-group">
            @Html.LabelFor(model => model.Name)
            @Html.TextBoxFor(model => model.Name, new { @class = "createtopicname form-control" })
            @Html.ValidationMessageFor(model => model.Name)
        </div>
    </div>
</div>
<div id="myDIV" style="display:none">
    <div class="col-md-6 col-md-offset-3">
    @if (Model.IsTopicStarter)
    {
        <div class="row paddedrow" style="display:none">
            <div class="col-md-12 topictitleholder">
                <h3 class="title-bar">@ViewBag.Title</h3>
            </div>
            @if (Html.Settings().EnablePolls == true)
            {
                <div class="col-md-12 pollcreatebuttonholder" @Html.Raw(Model.OptionalPermissions.CanCreatePolls ? "" : displayNone)>
                    <a href="#" class="btn btn-primary btn-full createpollbutton">@Html.LanguageString("Poll.Button.Create")</a>
                    <a href="#" style="display: none;" class="btn btn-primary btn-full removepollbutton">@Html.LanguageString("Poll.Button.Remove")</a>
                </div>
            }
        </div>



        <div class="row paddedrow relatedtopicsholder">
            <div class="col-md-12 relatedtopics">
                <h5>@Html.LanguageString("Topic.AlreadyAnswered")</h5>
                <div class="relatedtopicskey"></div>
            </div>
        </div>

        if (Html.Settings().EnablePolls == true)
        {
            <div class="pollanswerholder" @Html.Raw(Model.PollAnswers != null && Model.PollAnswers.Any() ? "" : displayNone) style="display:none">
                <div class="row paddedrow">
                    <div class="col-md-9">

                        <ul class="pollanswerlist">
                            @if (Model.PollAnswers != null && Model.PollAnswers.Any())
                            {
                                foreach (var pollAnswer in Model.PollAnswers.OrderBy(x => x.Answer))
                                {
                                    <li id="answer@(count)">
                                        <input type="text" name="PollAnswers[@(count)].Answer" id="PollAnswers_@(count)_Answer" value="@pollAnswer.Answer" class="form-control" placeholder="@Html.LanguageString("Poll.Placeholder.TypeAnswerHere")" />
                                        <input type="hidden" value="@pollAnswer.Id" name="PollAnswers[@(count)].Id" id="PollAnswers_@(count)Id" />
                                    </li>

                                    count++;
                                }
                            }
                        </ul>
                        <input type="hidden" id="pollanswerplaceholder" value="@Html.LanguageString("Poll.Placeholder.TypeAnswerHere")" />
                    </div>
                    <div class="col-md-3 polladdremovenewanswers">
                        <a href="#" class="btn-mvc addanswer">
                            <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>
                        </a>
                        <a href="#" class="btn-mvc removeanswer">
                            <span class="glyphicon glyphicon-minus" aria-hidden="true"></span>
                        </a>
                    </div>
                </div>
                <div class="paddedrow pollcloseafterdays">
                    <div class="form-group">
                        @Html.LabelFor(model => model.PollCloseAfterDays)
                        @Html.TextBoxFor(model => model.PollCloseAfterDays, new { @class = "form-control", type = "number" })
                        @Html.ValidationMessageFor(model => model.PollCloseAfterDays)
                    </div>
                </div>
            </div>
        }

        <div class="form-group">
            @Html.LabelFor(model => model.Category)
            @Html.DropDownListFor(model => model.Category, Model.Categories, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Category)
        </div>
        <div class="form-group" style="display:none">
            <label>@Html.Lang("Topic.Label.Tags")</label>
            <div class="topictagholder">
                <p class="createtagmessage help-block">@Html.Lang("Tags.NoCreatePermission")</p>
                @Html.TextAreaFor(model => model.Tags, new { @class = "tagstextarea tags", title = Html.LanguageString("Topic.TagThisTopic") })
            </div>
        </div>

    }
    else
    {
        <h2>@ViewBag.Title</h2>
        @Html.HiddenFor(x => x.Category)
        @Html.HiddenFor(x => x.Name)
    }



    <div class="row">
        <div class="col-md-12 ">
            <div class="editor-field editorholder">
                @Html.EditorFor(model => model.Content)
                @Html.ValidationMessageFor(model => model.Content)
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6 col-md-offset-3 createtopicbuttonholder">
            <div class="submit-holder">
                <button type="submit" class="btn btn-primary btn-full">
                    @if (Model.Id == Guid.Empty)
                    {
                        @Html.LanguageString("Topic.CreateDiscussion")
                    }
                    else
                    {
                        @Html.LanguageString("Post.Edit")
                    }
                </button>
            </div>
            @if (Model.IsTopicStarter)
            {
                <div class="checkbox createsubscribe">
                    @using (Html.BeginLabelFor(m => m.SubscribeToTopic, new { @class = "checkbox" }))
                    {
                        @Html.CheckBoxFor(m => m.SubscribeToTopic)
                    }
                    @Html.ValidationMessageFor(m => m.SubscribeToTopic)
                </div>
                <div class="checkbox createsticky" @Html.Raw(Model.OptionalPermissions.CanStickyTopic ? "" : displayNone)>
                    @using (Html.BeginLabelFor(m => m.IsSticky, new { @class = "checkbox" }))
                    {
                        @Html.CheckBoxFor(m => m.IsSticky)
                    }
                    @Html.ValidationMessageFor(m => m.IsSticky)
                </div>
                <div class="checkbox createlocked" @Html.Raw(Model.OptionalPermissions.CanLockTopic ? "" : displayNone)>
                    @using (Html.BeginLabelFor(m => m.IsLocked, new { @class = "checkbox" }))
                    {
                        @Html.CheckBoxFor(m => m.IsLocked)
                    }
                    @Html.ValidationMessageFor(m => m.IsLocked)
                </div>
            }
        </div>

        @if (Model.IsTopicStarter)
        {
            <div class="col-md-5 col-md-offset-1 topiccategory">

                @if (Model.Id == Guid.Empty)
                {
                    <div class="form-group createuploadfiles" @Html.Raw(Model.OptionalPermissions.CanUploadFiles ? "" : displayNone)>
                        @Html.LabelFor(x => x.Files)
                        <div class="input-group">
                            <span class="input-group-btn">
                                <span class="btn btn-default btn-file">
                                    @Html.LanguageString("Post.Browse") <input type="file" name="files" id="files" multiple="multiple" value="">
                                </span>
                            </span>
                            <input type="text" class="form-control" readonly="">
                        </div>
                        @Html.ValidationMessageFor(x => x.Files)
                    </div>
                }
            </div>

        }
    </div>
    @Html.HiddenFor(x => x.IsPostEdit)
    </div>
</div>
<!-- <div>
    <a id="anterior" href="#" onclick="window.history.back();">Anterior</a> <a id="proximo" href="#" onclick="myFunction()">Proximo</a>
</div> -->
<div class="clearfix"></div>
<div class="row btns-create-topic-holder">
    <div class="col-md-3 col-md-offset-3 btns-create-topic">
        <a id="anterior" class="btn btn-primary " href="#" onclick="window.history.back();">Anterior</a>
    </div>
    <div class="col-md-3 btns-create-topic">
        <a id="proximo" class="btn btn-primary" href="#" onclick="myFunction()">Proximo</a>
    </div>
</div>
<script>
    //$('#files').change(function (event) {
    //    var tmppath = URL.createObjectURL(event.target.files[0]);
    //    $("#imagem").fadeIn("fast").attr('src', URL.createObjectURL(event.target.files[0]));

    //    //$("#disp_tmp_path").html("Temporary Path(Copy it and try pasting it in browser address bar) --> <strong>[" + tmppath + "]</strong>");
    //});

    function myFunction() {
        var x = document.getElementById("myDIV");

        if ($("#myDIV").css('display') === 'none' && $("#Name").val() != '') {
            x.style.display = "block";
            $("#proximo").css('display', 'none');

        } else {
            alert("Por favor, informe o texto do título!");
            x.style.display = "none";
            $("#proximo").css('display', 'block');
        }
    }
    
</script>